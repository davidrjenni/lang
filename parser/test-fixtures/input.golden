Block(
	Pos: (Start: test-fixtures/input.l:1:1, End: test-fixtures/input.l:17:1)
	0: Assert(
		Pos: (Start: test-fixtures/input.l:2:2, End: test-fixtures/input.l:2:37)
		X: BinaryExpr(
			Pos: (Start: test-fixtures/input.l:2:9, End: test-fixtures/input.l:2:36)
			LHS: BinaryExpr(
				Pos: (Start: test-fixtures/input.l:2:9, End: test-fixtures/input.l:2:21)
				LHS: BinaryExpr(
					Pos: (Start: test-fixtures/input.l:2:9, End: test-fixtures/input.l:2:15)
					LHS: I64(Val: 42, Pos: test-fixtures/input.l:2:9, End: test-fixtures/input.l:2:11)
					Op: ·
					RHS: I64(Val: 2, Pos: test-fixtures/input.l:2:14, End: test-fixtures/input.l:2:15)
				)
				Op: ≤
				RHS: I64(Val: 84, Pos: test-fixtures/input.l:2:19, End: test-fixtures/input.l:2:21)
			)
			Op: ≤
			RHS: BinaryExpr(
				Pos: (Start: test-fixtures/input.l:2:25, End: test-fixtures/input.l:2:36)
				LHS: I64(Val: 85, Pos: test-fixtures/input.l:2:25, End: test-fixtures/input.l:2:27)
				Op: ·
				RHS: ParenExpr(
					Pos: (Start: test-fixtures/input.l:2:30, End: test-fixtures/input.l:2:36)
					X: BinaryExpr(
						Pos: (Start: test-fixtures/input.l:2:31, End: test-fixtures/input.l:2:36)
						LHS: I64(Val: 1, Pos: test-fixtures/input.l:2:31, End: test-fixtures/input.l:2:32)
						Op: +
						RHS: I64(Val: 1, Pos: test-fixtures/input.l:2:35, End: test-fixtures/input.l:2:36)
					)
				)
			)
		)
	)
	1: Assert(
		Pos: (Start: test-fixtures/input.l:3:2, End: test-fixtures/input.l:3:30)
		X: BinaryExpr(
			Pos: (Start: test-fixtures/input.l:3:9, End: test-fixtures/input.l:3:30)
			LHS: BinaryExpr(
				Pos: (Start: test-fixtures/input.l:3:9, End: test-fixtures/input.l:3:22)
				LHS: F64(Val: 5, Pos: test-fixtures/input.l:3:9, End: test-fixtures/input.l:3:12)
				Op: ·
				RHS: F64(Val: 5, Pos: test-fixtures/input.l:3:13, End: test-fixtures/input.l:3:22)
			)
			Op: =
			RHS: F64(Val: 25, Pos: test-fixtures/input.l:3:25, End: test-fixtures/input.l:3:30)
		)
	)
	2: Assert(
		Pos: (Start: test-fixtures/input.l:4:2, End: test-fixtures/input.l:4:16)
		X: BinaryExpr(
			Pos: (Start: test-fixtures/input.l:4:9, End: test-fixtures/input.l:4:16)
			LHS: UnaryExpr(
				Pos: (Start: test-fixtures/input.l:4:9, End: test-fixtures/input.l:4:12)
				Op: -
				X: UnaryExpr(
					Pos: (Start: test-fixtures/input.l:4:10, End: test-fixtures/input.l:4:12)
					Op: -
					X: I64(Val: 1, Pos: test-fixtures/input.l:4:11, End: test-fixtures/input.l:4:12)
				)
			)
			Op: =
			RHS: I64(Val: 1, Pos: test-fixtures/input.l:4:15, End: test-fixtures/input.l:4:16)
		)
	)
	3: Assert(
		Pos: (Start: test-fixtures/input.l:5:2, End: test-fixtures/input.l:5:15)
		X: UnaryExpr(
			Pos: (Start: test-fixtures/input.l:5:9, End: test-fixtures/input.l:5:15)
			Op: ¬
			X: UnaryExpr(
				Pos: (Start: test-fixtures/input.l:5:10, End: test-fixtures/input.l:5:15)
				Op: ¬
				X: Bool(Val: true, Pos: test-fixtures/input.l:5:11, End: test-fixtures/input.l:5:15)
			)
		)
	)
	4: For(
		Pos: (Start: test-fixtures/input.l:7:2, End: test-fixtures/input.l:7:12)
		X: Bool(Val: true, Pos: test-fixtures/input.l:7:6, End: test-fixtures/input.l:7:10)
		Block: Block(
			Pos: (Start: test-fixtures/input.l:7:11, End: test-fixtures/input.l:7:12)
			
		)
	)
	5: For(
		Pos: (Start: test-fixtures/input.l:8:2, End: test-fixtures/input.l:12:2)
		X: BinaryExpr(
			Pos: (Start: test-fixtures/input.l:8:6, End: test-fixtures/input.l:8:13)
			LHS: BinaryExpr(
				Pos: (Start: test-fixtures/input.l:8:6, End: test-fixtures/input.l:8:9)
				LHS: I64(Val: 2, Pos: test-fixtures/input.l:8:6, End: test-fixtures/input.l:8:7)
				Op: ·
				RHS: I64(Val: 3, Pos: test-fixtures/input.l:8:8, End: test-fixtures/input.l:8:9)
			)
			Op: <
			RHS: I64(Val: 5, Pos: test-fixtures/input.l:8:12, End: test-fixtures/input.l:8:13)
		)
		Block: Block(
			Pos: (Start: test-fixtures/input.l:8:14, End: test-fixtures/input.l:12:2)
			0: Assert(
				Pos: (Start: test-fixtures/input.l:9:3, End: test-fixtures/input.l:9:16)
				X: BinaryExpr(
					Pos: (Start: test-fixtures/input.l:9:10, End: test-fixtures/input.l:9:16)
					LHS: UnaryExpr(
						Pos: (Start: test-fixtures/input.l:9:10, End: test-fixtures/input.l:9:12)
						Op: -
						X: I64(Val: 1, Pos: test-fixtures/input.l:9:11, End: test-fixtures/input.l:9:12)
					)
					Op: =
					RHS: I64(Val: 1, Pos: test-fixtures/input.l:9:15, End: test-fixtures/input.l:9:16)
				)
			)
			1: Break(Pos: test-fixtures/input.l:10:3, End: test-fixtures/input.l:10:8)
			2: Continue(Pos: test-fixtures/input.l:11:3, End: test-fixtures/input.l:11:11)
			
		)
	)
	6: If(
		Pos: (Start: test-fixtures/input.l:14:2, End: test-fixtures/input.l:16:2)
		X: Bool(Val: true, Pos: test-fixtures/input.l:14:5, End: test-fixtures/input.l:14:9)
		Block: Block(
			Pos: (Start: test-fixtures/input.l:14:10, End: test-fixtures/input.l:16:2)
			0: Assert(
				Pos: (Start: test-fixtures/input.l:15:3, End: test-fixtures/input.l:15:14)
				X: Bool(Val: true, Pos: test-fixtures/input.l:15:10, End: test-fixtures/input.l:15:14)
			)
			
		)
	)
	
)