// Code generated by "stringer -type=Tok -linecomment"; DO NOT EDIT.

package lexer

import "strconv"

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[EOF-0]
	_ = x[Illegal-1]
	_ = x[LeftParen-2]
	_ = x[RightParen-3]
	_ = x[LeftBracket-4]
	_ = x[RightBracket-5]
	_ = x[Comma-6]
	_ = x[Semicolon-7]
	_ = x[Plus-8]
	_ = x[Minus-9]
	_ = x[Multiply-10]
	_ = x[Divide-11]
	_ = x[And-12]
	_ = x[Or-13]
	_ = x[Implies-14]
	_ = x[Less-15]
	_ = x[LessEq-16]
	_ = x[Equal-17]
	_ = x[NotEqual-18]
	_ = x[Greater-19]
	_ = x[GreaterEq-20]
	_ = x[In-21]
	_ = x[Is-22]
	_ = x[Not-23]
	_ = x[I64Lit-24]
	_ = x[F64Lit-25]
	_ = x[StringLit-26]
	_ = x[True-27]
	_ = x[False-28]
	_ = x[Bool-29]
	_ = x[I64-30]
	_ = x[F64-31]
	_ = x[String-32]
	_ = x[Assert-33]
}

const _Tok_name = "EOFillegal()[],;+-·÷∧∨⟹<≤=≠>≥∈is¬i64 literalf64 literalstring literaltruefalsebooli64f64stringassert"

var _Tok_index = [...]uint8{0, 3, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 22, 25, 28, 31, 32, 35, 36, 39, 40, 43, 46, 48, 50, 61, 72, 86, 90, 95, 99, 102, 105, 111, 117}

func (i Tok) String() string {
	if i < 0 || i >= Tok(len(_Tok_index)-1) {
		return "Tok(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Tok_name[_Tok_index[i]:_Tok_index[i+1]]
}
