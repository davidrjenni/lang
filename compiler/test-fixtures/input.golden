
.macro AssertViolated
    movq $___fmt_assert, %rdi
    movq $0, %rax
    call printf
    movq $1, %rdi
    movq $0, %rax
    call exit
.endm

	.section .text
	.global main
main:
	pushq %rbp
	movq %rsp, %rbp
	subq $8, %rsp
	movb $1, %al  # test-fixtures/input.l:2:12
	cmpb $1, %al  # test-fixtures/input.l:2:12
	setne %al  # test-fixtures/input.l:2:11
	movb %al, %al  # test-fixtures/input.l:2:10
	cmpb $1, %al  # test-fixtures/input.l:2:10
	setne %al  # test-fixtures/input.l:2:9
	movb %al, %al  # test-fixtures/input.l:2:9
	cmpb $1, %al  # test-fixtures/input.l:2:9
	je .L1  # test-fixtures/input.l:2:2
	AssertViolated  # test-fixtures/input.l:2:2
.L1:
	movb $0, %al  # test-fixtures/input.l:3:12
	cmpb $1, %al  # test-fixtures/input.l:3:12
	setne %al  # test-fixtures/input.l:3:11
	movb %al, %al  # test-fixtures/input.l:3:10
	cmpb $1, %al  # test-fixtures/input.l:3:10
	setne %al  # test-fixtures/input.l:3:9
	movb %al, %al  # test-fixtures/input.l:3:9
	cmpb $1, %al  # test-fixtures/input.l:3:9
	je .L2  # test-fixtures/input.l:3:2
	AssertViolated  # test-fixtures/input.l:3:2
.L2:

	movq $0, %rax
	movq %rbp, %rsp
	popq %rbp
	ret

	.section .data
___fmt_assert: .string "Assertion violated\n"
